1) How to find the maximum occurring character in a given String?
Write an efficient Java program to return the maximum occurring character in the input string
e.g., if the input string is "Java" then the function should return 'a'.

public class Characters   
{  
     public static void main(String[] args) {  
        String str = "grass is greener on the other side";  
        int[] freq = new int[str.length()];  
        char minChar = str.charAt(0), maxChar = str.charAt(0);  
        int i, j, min, max;          
          
        //Converts given string into character array  
        char string[] = str.toCharArray();  
          
        //Count each word in given string and store in array freq  
        for(i = 0; i < string.length; i++) {  
            freq[i] = 1;  
            for(j = i+1; j < string.length; j++) {  
                if(string[i] == string[j] && string[i] != ' ' && string[i] != '0') {  
                    freq[i]++;  
                      
                    //Set string[j] to 0 to avoid printing visited character  
                    string[j] = '0';  
                }  
            }  
        }  
          
        //Determine minimum and maximum occurring characters  
        min = max = freq[0];  
        for(i = 0; i <freq.length; i++) {  
              
            //If min is greater than frequency of a character   
            //then, store frequency in min and corresponding character in minChar  
            if(min > freq[i] && freq[i] != '0') {  
                min = freq[i];  
                minChar = string[i];  
            }  
            //If max is less than frequency of a character   
            //then, store frequency in max and corresponding character in maxChar  
            if(max < freq[i]) {  
                max = freq[i];  
                maxChar = string[i];  
            }  
        }  
          
        System.out.println("Minimum occurring character: " + minChar);  
        System.out.println("Maximum occurring character: " + maxChar);  
    }  
}  
===================================================================================================================================
2) How to remove all duplicates from a given string?
Write a program to remove all the duplicate characters from a given input String e.g. if given
String is "Java" then output should be "Java". The second or further occurrence of duplicate
should be removed.

public class test {

    public static void main(String[] args) {

        String input = new String("abbc");
        String output = new String();

        for (int i = 0; i < input.length(); i++) {
            for (int j = 0; j < output.length(); j++) {
                if (input.charAt(i) != output.charAt(j)) {
                    output = output + input.charAt(i);
                }
            }
        }

        System.out.println(output);

    }

}
===================================================================================================================================
3) How to print the duplicate characters from the given String?
Write an efficient Java program to return the duplicate characters from given String, for example
if given String is "C++" then your program should print "+" Similarly, if input is "Java and
JavaScript" then your program should print "J", "a" and "v". You can ignore cases for finding
duplicates

public class DuplicateWordsInString{ public static void main(String[] args)
 { 
	String test = "This sentence contains two words, one and two";
	 Set<String> duplicates = duplicateWords(test); 
	System.out.println("input : " + test); System.out.println("output : " + duplicates);
 }

public static Set<String> duplicateWords(String input)
{ 
	if(input == null || input.isEmpty())
	{ 
		return Collections.emptySet();
 	}

Set<String> duplicates = new HashSet<>(); 
String[] words = input.split("\\s+"); 
Set<String> set = new HashSet<>();
 for(String word : words)
{ if(!set.add(word))
{ duplicates.add(word); 
} 
} return duplicates;
 }
============================================================================================
4) How to remove characters from the first String which are present in the second String?
Write an efficient Java function that takes two strings as arguments and removes the characters
from the first string which are present in the second string. For example, if the first String "India is
great" and second String is "in" then output should be "da s great"
public class Tmp {

    public static void main(String[] args) {
        String s = "halloween";
        String s1 = "halcyon";
        char[] ss = s.toCharArray();
        char[] ss1 = s1.toCharArray();

        for(int i=0;i<ss.length;i++){
          for(int j=0;j<ss1.length;j++){
                if(ss1[j] == ss[i]){
                    ss1[j] = 'x'; //Replace the common char with x
                }
            }
         }
        System.out.println(Arrays.toString(ss1));
    }
}
==================================================================================================
5) How to check if two strings are rotations of each other?
Write an efficient program to test if two given String is a rotation of each other or not e.g. if given
String is "XYZ" and "ZXY" then your function should return true but if the input is "XYZ" and
"YXZ" then return false.

import java.util.Scanner; 
/* * Java Program to check if one String is rotation of * another. */ 
public class Main { public static void main(String[] args) throws Exception { 
	Scanner scnr = new Scanner(System.in); 
	System.out.println("Please enter original String"); 
	String input = scnr.nextLine();
	System.out.println("Please enter rotation of String");
	String rotation = scnr.nextLine();
	if (checkRotatation(input, rotation)) {
		System.out.println(input + " and " + rotation + " are rotation of each other");
	} else 
	{ 
		System.out.println("Sorry, they are not rotation of another"); 
	} 
	scnr.close();
 	}
	 /** * This method check is given strings are rotation of each other * @param original * @param rotation * @return true or false */
	 public static boolean checkRotatation(String original, String rotation)
	 { 
		if (original.length() != rotation.length()) {
		 return false; 
	 }
	 String concatenated = original + original; 
	if (concatenated.indexOf(rotation) != -1) {
	 return true; 
		} 
		return false; 
} 
}

=================================================================================================================================
https://www.java67.com/2018/04/21-string-programming-and-coding-interview-questions-answers.html