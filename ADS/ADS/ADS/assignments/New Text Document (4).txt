#include<iostream>

using namespace std;
class Stack
{
    private:
        int top,size;
        int *store;
    public:
        Stack(int size)
        {
            top=-1;
            this->size=size;
            store=new int[size];
        }
        int isFull()
        {
            if(top=size-1)
                return 1;
                return 0;
        }
        int isEmpty()
        {
            if(top==-1)
                return 1;
                return 0;
        }
        void push(int data)
        {
            top++;
            store[data]=data;
        }
        int pop()
        {
            int data=store[data];
            top--;
            return data;
        }
};
/*class Queue
{
    private:
        int front,rear,size;
        int *store;
    public:
        Queue(int size)
        {
            front=rear=-1;
            this->size=size;
            store=new int[size];
        }
        void enqueue(int data)
        {
            rear++;
            store[rear]=data;
        }
        int dequeue()
        {
            front++;
            if(front==rear)
            {
                front=rear=-1;
            }
            int data=store[front];
            return data;
        }
        int isFull()
        {
            if(rear==size-1)
                return 1;
                return 0;
        }
        int isEmpty()
        {
            if(front==rear)
                return 1;
                return 0;
        }
};*/
class Node
{
    private:
        int data;
        Node *left;
        Node *right;
    public:
        Node(int data)
        {
            this->data=data;
            left=NULL;
            right=NULL;
        }
        /*void print()
        {
            cout<<data<<" ";
        }*/
        int getdata()
        {
            return data;
        }
        void setleft(Node *left)
        {
            this->left=left;
        }
        void setright(Node *right)
        {
            this->right=right;
        }
        Node *getleft()
        {
            return left;
        }
        Node *getright()
        {
            return right;
        }
};
class BST
{
    private:
        Node *root;
    public:
        BST()
        {
            root=NULL;
        }
        void insert(int data)
        {
            Node *node=new Node(data);
            if(root==NULL)
            {
                root=node;
            }
            else
            {
                Node *temp=root;
                Node *prev=NULL;
                while(temp!=NULL)
                {
                    prev=temp;
                    if(data<=temp->getdata())
                    {
                        temp=temp->getleft();
                    }
                    else
                    {
                        temp=temp->getright();
                    }
                }
                if(data<=prev->getdata())
                {
                    prev->setleft(node);
                }
                else
                {
                    prev->setright(node);
                }
            }
        }
        int inorder(Node *root)
        {
            
            if(root==NULL)
            {
                return 0;
            }
            else
            {
                Node *temp=root;
                inorder(temp->getleft());
                cout<<temp->getdata()<<" ";
                inorder(temp->getright());
            }
        }
        int inprint()
        {
            return inorder(root);
        }
        int preorder(Node *root)
        {
            
            if(root==NULL)
            {
                return 0;
            }
            else
            {
                Node *temp=root;
                cout<<temp->getdata()<<" ";
                inorder(temp->getleft());
                inorder(temp->getright());
            }
        }
        int preprint()
        {
            return preorder(root);
        }
};
int main()
{
    BST b;
    int data;
    while(1)
    {
        cin>>data;
        if(data==-1)
        {
            break;
        }
    b.insert(data);
    }
    b.inprint();
    cout<<endl;
    b.preprint();
    
    return 0;
}