#include<iostream>

using namespace std;

void swapfun(int n1[],int n2[])
{
    int temp=*n1;
        *n1=*n2;
        *n2=temp;
}
int partition(int array[],int s,int e,int n)
{
    int swap=(s+e)/2;
    swapfun(array+s,array+swap);
    int pivot=s+1;
    int pindex=s;
    
    for(pivot;pivot<=e;pivot++)
    {
        if(array[pivot]<array[s])
        {
        /*    int temp=array[i];
            array[i]=array[pindex];
            array[pindex]=temp;*/
            pindex++;
            swapfun(array+pivot,array+pindex);
        }
    }
    
    /*int temp=array[e];
    array[e]=array[pindex];
    array[pindex]=temp;*/
    swapfun(array+pindex,array+s);
    for(int x=0; x<n; x++ )
    cout<<array[x]<<" ";
    cout<<endl;
    return pindex;
}

void QuickSort(int array[],int s,int e,int n)
{
    if(s<e)
    {
        int p=partition(array,s,e,n);
        QuickSort(array,s,p-1,n); //recursive QS call for left partion
        QuickSort(array,p+1,e,n);  //recursive QS call for right partion
        return;
    }
    else
        return;
    
}
int main()
{
    int a;
    cin>>a;
    int myarray[a];
    for(int i=0;i<a;i++)
        cin>>myarray[i];
    int s=0;
    int e=a-1;
    
    QuickSort(myarray,s,e,a);
    
    return 0;
}