#include<iostream>

using namespace std;
       
        int hashfun(int data,int size)
        {
            return (data % size);
                        
        }
        int evenodd(int data)
        {
            int N=data % 2;
            if(N==0)
                return 1;
                return 0;
        }
        int place(int data)
        {
            int c=0;
            while(data>0)
            {
                data=data/10;
                c++;
            }
            return c;
        }
        int seperate(int data)
        {
            int N=data%10;
            data=data-N;
            data=data/10;
            return data;
        }
        
      /*   int insert(int data)
        {
            int index=hashfun(data);
            for(int i=0;i<bucket;i++)
            {
          //      if(table[i]==0 && index==i)]
                    cout<<index<<" "<<endl;
                    table[i]=index;
          //      else if(table[i]!=0)
                    break;
            }
                fun1(data);
        }*/
        /*int display(int data)
        {
            cout<<insert(int data);
        }*/

int main()
{   
    int size;
    cin>>size;
    int arr[size];
    for(int i=0;i<size;i++)
    {
        arr[i]=-1;
    }
    int N=-2;
    int count=0;
    while(N!=-1)
    {
        count++;
        if(size < count)
        {
            break;
        }
        cin>>N;
        if(N==-1)
        {
            break;
        }
        else
        {
            int flag=0;
            int data=N;
            int H=hashfun(data,size);
            int location=0;
            while(arr[H] != -1)
            {
                cout<<H<<" ";
                int evn=evenodd(data);
                if(place(data) > 0)
                {
                    data=seperate(data);
                    int stp=hashfun(data,size);
                    if(evn==1)
                    {
                        H=H-stp;
                        location=-1;
                        if(H<0)
                            H=size+H;
                        continue;
                    }
                    else if(evn==0)
                    {
                        H=H+stp;
                        location=-2;
                        if(H > (size-1))
                        {
                            H=H-size;
                        }
                        continue;
                    }
                }
                else if(place(data) < 1)
                {
                    if(location==-1)
                    {
                        H=H-1;
                        if(H<0)
                            H=size+1;
                        continue;
                    }
                    else if(location==-2)
                    {
                        H=H+1;
                        if(H > (size-1))
                        {
                            H=H-size;
                        }
                        continue;
                    }
                    else
                    {
                        if(evn==1)
                        {
                            H=H-1;
                            if(H<0)
                                H=size+H;
                            continue;
                        }
                        else if(evn==0)
                        {
                            H=H+1;
                            if(H>(size-1))
                                H=H-size;
                            continue;
                        }
                    }
                }
                cout<<H<<" ";
                flag=1;
            }
            if(flag!=1)
                cout<<H;
                arr[H]=N;
                cout<<endl;
        }
    }
    return 0;
}