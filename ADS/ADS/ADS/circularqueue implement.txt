#include<iostream>
using namespace std;

class cqueue{
	private:
		int size;
		int front;
		int rear;
		int noe;
		int *store;
	public:
		cqueue(){
			size=0;
			front=rear=-1;
			noe=0;
			store=NULL;
		}
		cqueue(int size){
			this->size=size;
			front=rear=-1;
			noe=0;
			store=new int[size];
		}
		~cqueue(){
			delete [] store;
		}
		void isFull(){
			if(noe==size)
				return 1;
				return 0;
		}
		void isEmpty(){
			if(noe==0)
				return 1;
				return 0;
		}
		void enqueue(int data){
			rear=(rear+1)%size;
			noe++;
			store[rear]=data;	
		}
		int dequeue(){
			front=(front+1)%size;
			noe--;
			int data=store[front];
			if(front==rear){
				front=rear=-1;
			}					
			return data;
		}
};
int main(){
	int n;
	cin>>n;
	cqueue c(n);
	int data;
	string cmd;
	while(1){
		cin>>cmd;
		if(cmd=="exit"){
			break;
		}
		if(cmd=="i"){
			int data;
			if(!c.isFull()){
				c.enqueue(data);
			}
			else{
				cout<<"Full"<<endl;		
			}
		}
		if(cmd=="o"){
			if(!c.isEmpty()){
				cout<<c.dequeue();
			}
			else{
				cout<<"Empty"<<endl;
			}
		}
	}
	return 0;
}













